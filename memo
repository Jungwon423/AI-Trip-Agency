// TravelMap.tsx

import { useState } from 'react'
import ReactMapGL, { Marker, Popup, NavigationControl, FullscreenControl, ScaleControl, GeolocateControl, Source, Layer } from 'react-map-gl'
import { useSelector } from 'react-redux'
import { selectTravelSchedule, selectCurrentPlace } from '../store/travelInfoSlice'
import { pinColors } from './pinColors'
import Pin from './Pin'

const TravelMap = () => {
  const travelSchedule = useSelector(selectTravelSchedule)
  const selectedPlace = useSelector(selectCurrentPlace)
  const [viewport, setViewport] = useState({
    width: '100%',
    height: '100%',
    latitude: 37.7577,
    longitude: -122.4376,
    zoom: 8,
  })

  const pinFeatures = travelSchedule.flatMap(([day, places]) =>
    places.map((place, index) => ({
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [place.longitude, place.latitude],
      },
      properties: {
        id: `${day}-${index}`,
        color: pinColors[index % pinColors.length],
      },
    }))
  )

  const routeFeatures = travelSchedule.map(([day, places]) => ({
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: places.map((place) => [place.longitude, place.latitude]),
    },
    properties: {
      id: day,
    },
  }))

  return (
    <ReactMapGL
      {...viewport}
      onViewportChange={(nextViewport) => setViewport(nextViewport)}
      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}
    >
      <GeolocateControl position="top-left" />
      <FullscreenControl position="top-left" />
      <NavigationControl position="top-left" />
      <ScaleControl />
      {pinFeatures.map((feature) => (
        <Marker
          key={feature.properties.id}
          latitude={feature.geometry.coordinates[1]}
          longitude={feature.geometry.coordinates[0]}
        >
          <Pin color={feature.properties.color} />
        </Marker>
      ))}
      {selectedPlace && selectedPlace.coordinate && (
        <Popup
          anchor="top"
          latitude={selectedPlace.coordinate[1]}
          longitude={selectedPlace.coordinate[0]}
          onClose={() => dispatch(handleCurrentPlace(selectedPlace))}
        >
          <div>{selectedPlace.name}</div>
        </Popup>
      )}
      {routeFeatures.map((feature) => (
        <Source key={feature.properties.id} type="geojson" data={feature}>
          <Layer
            type="line"
            paint={{
              'line-color': '#007cbf',
              'line-width': 4,
            }}
          />
        </Source>
      ))}
    </ReactMapGL>
  )
}

export default TravelMap